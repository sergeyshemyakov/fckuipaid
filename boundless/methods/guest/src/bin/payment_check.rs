// Copyright 2025 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::{keccak256, Address, Signature};
use alloy_sol_types::{sol, SolValue};
use revm_primitives::hardfork::SpecId;
use risc0_steel::{config::ChainSpec, ethereum::EthEvmInput, Commitment, Contract};
use risc0_zkvm::guest::env;

risc0_zkvm::guest::entry!(main);

/// Specify the function to call using the [`sol!`] macro.
/// This parses the Solidity syntax to generate a struct that implements the `SolCall` trait.
sol! {
    /// Payment receiver payment check function signature.
    interface PaymentReceiver {
        function hasPaid(address userAddr, uint64 month) public view returns (bool);
    }
}

/// ABI encodable journal data.
sol! {
    struct Journal {
        Commitment commitment;
        uint64 month;
    }
}

fn main() {
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    let payment_contract: Address = env::read();
    let month: u64 = env::read();
    let user_address: Address = env::read();
    let signature_bytes: Vec<u8> = env::read();

    let message = b"This message proofs your ownership of your address in zk proof";

    // Create the Arbitrum Sepolia chain spec
    let arb_sepolia_chain_spec = ChainSpec::new_single(421614, SpecId::CANCUN);

    // Converts the input into a `EvmEnv` for execution. It checks that the state matches the state
    // root in the header provided in the input.
    let env = input.into_env(&arb_sepolia_chain_spec);

    // Execute the view call; it returns the result in the type generated by the `sol!` macro.
    let call = PaymentReceiver::hasPaidCall {
        userAddr: user_address,
        month,
    };
    let returns = Contract::new(payment_contract, &env)
        .call_builder(&call)
        .call();

    // Check that the user has paid for the given month
    assert!(returns);

    // Check that the given signature is a valid signature for the provided address
    let signature = Signature::try_from(signature_bytes.as_slice()).unwrap();
    // Ethereum signed message prefix
    let prefix = format!("\x19Ethereum Signed Message:\n{}", message.len());
    let eth_message_hash = keccak256([prefix.as_bytes(), message].concat());
    let recovered_address = signature
        .recover_address_from_msg(&eth_message_hash)
        .expect("recovery failed");
    assert_eq!(recovered_address, user_address);

    // Commit the block hash and number used when deriving `view_call_env` to the journal.
    let journal = Journal {
        commitment: env.into_commitment(),
        month: month,
    };
    env::commit_slice(&journal.abi_encode());
}